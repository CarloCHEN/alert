# Makefile for Pudu Webhook API CI/CD Operations
.PHONY: help install-dev format lint test test-unit test-integration test-all security docker build clean ci-local

# Default target
help:
	@echo "🚀 Pudu Webhook API CI/CD Commands"
	@echo "=================================="
	@echo ""
	@echo "📦 Setup Commands:"
	@echo "  install-dev     Install development dependencies"
	@echo "  setup-pre-commit Install pre-commit hooks"
	@echo ""
	@echo "🎨 Code Quality Commands:"
	@echo "  format          Format code with black and isort"
	@echo "  lint            Run all linters (flake8, pylint, bandit)"
	@echo "  security        Run security checks"
	@echo ""
	@echo "🧪 Testing Commands:"
	@echo "  test-simple     Run simple functionality tests"
	@echo "  test-unit       Run unit tests"
	@echo "  test-integration Run integration tests"
	@echo "  test-all        Run all tests"
	@echo ""
	@echo "🐳 Docker Commands:"
	@echo "  docker-build    Build Docker image"
	@echo "  docker-test     Test Docker image"
	@echo ""
	@echo "🔄 CI/CD Commands:"
	@echo "  ci-local        Run complete CI pipeline locally"
	@echo "  pre-commit      Run pre-commit hooks"
	@echo "  clean           Clean up temporary files"

# Development setup
install-dev:
	@echo "📦 Installing development dependencies..."
	pip install --upgrade pip
	pip install -r requirements.txt
	pip install black isort flake8 pylint bandit safety pytest pytest-cov pre-commit

setup-pre-commit:
	@echo "🔧 Setting up pre-commit hooks..."
	pre-commit install
	pre-commit install --hook-type commit-msg

# Code formatting and quality
format:
	@echo "🎨 Formatting code..."
	black --line-length=127 .
	isort --profile=black --line-length=127 .

lint:
	@echo "🔍 Running linters..."
	@echo "→ Flake8..."
	flake8 . --max-line-length=127 --extend-ignore=E203,W503 || true
	@echo "→ Pylint..."
	pylint --exit-zero *.py || true
	@echo "→ Bandit security check..."
	bandit -r . --skip=B101 || true

security:
	@echo "🔒 Running security checks..."
	@echo "→ Safety check..."
	safety check || true
	@echo "→ Bandit security analysis..."
	bandit -r . -f json -o bandit-report.json || true
	bandit -r . || true

# Testing commands
test-simple:
	@echo "🧪 Running simple tests..."
	python test/simple_test.py

test-unit:
	@echo "🧪 Running unit tests..."
	@echo "→ Testing processors..."
	python test/unit/test_processors.py
	@echo "→ Testing database writer..."
	python test/unit/test_database_writer.py
	@echo "→ Testing notification sender..."
	python test/unit/test_notification_sender.py

test-integration:
	@echo "🔗 Running integration tests..."
	@echo "→ Testing complete flow..."
	python test/integration/test_complete_flow.py

test-endpoint:
	@echo "🌐 Running endpoint tests..."
	@echo "⚠️  Note: This requires the test server to be running"
	@echo "Start test server with: python test/start_test_server.py"
	python test/integration/test_webhook_endpoint.py

test-all: test-simple test-unit test-integration
	@echo "✅ All tests completed!"

# Docker commands
docker-build:
	@echo "🐳 Building Docker image..."
	docker build -t pudu-webhook-api:local .

docker-test: docker-build
	@echo "🧪 Testing Docker image..."
	@echo "→ Starting container..."
	docker run -d --name pudu-test-local -p 8001:8000 \
		-e PUDU_CALLBACK_CODE=test_callback_code \
		-e DEBUG=true -e TEST_MODE=true \
		pudu-webhook-api:local
	@echo "→ Waiting for container to start..."
	sleep 5
	@echo "→ Testing health endpoint..."
	curl -f http://localhost:8001/api/pudu/webhook/health || echo "Health check failed"
	@echo "→ Stopping and removing container..."
	docker stop pudu-test-local
	docker rm pudu-test-local

# CI/CD commands
pre-commit:
	@echo "🔧 Running pre-commit hooks..."
	pre-commit run --all-files

ci-local: format lint security test-all docker-test
	@echo "🎉 Local CI pipeline completed successfully!"
	@echo ""
	@echo "✅ Code formatted and linted"
	@echo "✅ Security checks passed"
	@echo "✅ All tests passed"
	@echo "✅ Docker image built and tested"
	@echo ""
	@echo "Ready to push to GitHub! 🚀"

# Cleanup
clean:
	@echo "🧹 Cleaning up..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	rm -f bandit-report.json safety-report.json 2>/dev/null || true